t#include "main.h"

/**
 * A callback function for LLEMU's center button.
 *
 * When this callback is fired, it will toggle line 2 of the LCD text between
 * "I was pressed!" and nothing.
 */
void on_center_button()
{
	static bool pressed = false;
	pressed = !pressed;
	if (pressed)
	{
		pros::lcd::set_text(2, "working");
	}
	else
	{
		pros::lcd::clear_line(2);
	}
}

/**
 * Runs initialization code. This occurs as soon as the program is started.
 *
 * All other competition modes are blocked by initialize; it is recommended
 * to keep execution time for this mode under a few seconds.
 */
void initialize()
{
	pros::lcd::initialize();
	pros::lcd::set_text(1, "Hello PROS User!");

	pros::lcd::register_btn1_cb(on_center_button);

	// Initialize double action solenoid to down position
	pros::ADIDigitalOut doinker('G');
	pros::ADIDigitalOut clamp('H');
	doinker.set_value(false); // Ensure extend is off

	pros::ADIEncoder arm_encoder('A', 'B', false);
}

/**
 * Runs while the robot is in the disabled state of Field Management System or
 * the VEX Competition Switch, following either autonomous or opcontrol. When
 * the robot is enabled, this task will exit.
 */
void disabled() {}

/**
 * Runs after initialize(), and before autonomous when connected to the Field
 * Management System or the VEX Competition Switch. This is intended for
 * competition-specific initialization routines, such as an autonomous selector
 * on the LCD.
 *
 * This task will exit when the robot is enabled and autonomous or opcontrol
 * starts.
 */
void competition_initialize() {}

/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */

pros::Controller master(pros::E_CONTROLLER_MASTER);
pros::Motor left_motor_1(-18);
pros::Motor left_motor_2(-19);
pros::Motor left_motor_3(-20);
// ^^ negative ports are reversed

pros::Motor right_motor_1(1);
pros::Motor right_motor_2(2);
pros::Motor right_motor_3(3);
// pros::MotorGroup right_mg({1, 2, 3}); // Creates a motor group with forwards port 5 and reversed ports 4 & 6
pros::Motor intake(6);
pros::Motor hook(-11);
pros::Motor arm(5);

pros::ADIDigitalOut clamp('H');
pros::ADIDigitalOut doinker('G');
pros::ADIEncoder arm_encoder('A', 'B', false);

void autonomous()
{

	arm.move(90);
	pros::delay(3000);
	arm.move(0);
	left_motor_1.move(80);
	left_motor_2.move(80);
	left_motor_3.move(80);
	right_motor_1.move(80);
	right_motor_2.move(80);
	right_motor_3.move(80);
	pros::delay(75);
	arm.move(-90);
	pros::delay(1000);
	arm.move(0);

	left_motor_1.move(-80);
	left_motor_2.move(-80);
	left_motor_3.move(-80);
	right_motor_1.move(-80);
	right_motor_2.move(-80);
	right_motor_3.move(-80);
	pros::delay(350);
	left_motor_1.move(0);
	left_motor_2.move(0);
	left_motor_3.move(0);
	right_motor_1.move(0);
	right_motor_2.move(0);
	right_motor_3.move(0);
	pros::delay(200);
	left_motor_1.move(-80);
	left_motor_2.move(-80);
	left_motor_3.move(-80);
	right_motor_1.move(80);
	right_motor_2.move(80);
	right_motor_3.move(80);
	pros::delay(25);
	left_motor_1.move(0);
	left_motor_2.move(0);
	left_motor_3.move(0);
	right_motor_1.move(0);
	right_motor_2.move(0);
	right_motor_3.move(0);
	pros::delay(200);
	// clamp.set_value(true);

	// // Move forward for 1s
	// left_motor_1.move(80);
	// left_motor_2.move(80);
	// left_motor_3.move(80);
	// right_motor_1.move(80);
	// right_motor_2.move(80);
	// right_motor_3.move(80);
	// pros::delay(1000);

	// intake.move(127);
	// pros::delay(500);
	// intake.move(0);

	// // Move right for 600ms
	// left_motor_1.move(80);
	// left_motor_2.move(80);
	// left_motor_3.move(80);
	// right_motor_1.move(-80);
	// right_motor_2.move(-80);
	// right_motor_3.move(-80);
	// pros::delay(600);

	// // Move backwards for 600ms
	// left_motor_1.move(-80);
	// left_motor_2.move(-80);
	// left_motor_3.move(-80);
	// right_motor_1.move(-80);
	// right_motor_2.move(-80);
	// right_motor_3.move(-80);
	// pros::delay(600);

	// clamp.set_value(true);
	// pros::delay(500);
	// clamp.set_value(false);

	// // Move left for 600ms
	// left_motor_1.move(-80);
	// left_motor_2.move(-80);
	// left_motor_3.move(-80);
	// right_motor_1.move(80);
	// right_motor_2.move(80);
	// right_motor_3.move(80);
	// pros::delay(600);

	// // Move forward for 500ms
	// left_motor_1.move(80);
	// left_motor_2.move(80);
	// left_motor_3.move(80);
	// right_motor_1.move(80);
	// right_motor_2.move(80);
	// right_motor_3.move(80);
	// pros::delay(500);

	// intake.move(127);
	// pros::delay(2000);
	// intake.move(0);

	// // Move right for 600ms
	// left_motor_1.move(80);
	// left_motor_2.move(80);
	// left_motor_3.move(80);
	// right_motor_1.move(-80);
	// right_motor_2.move(-80);
	// right_motor_3.move(-80);
	// pros::delay(600);

	// // Move forward for 500ms
	// left_motor_1.move(80);
	// left_motor_2.move(80);
	// left_motor_3.move(80);
	// right_motor_1.move(80);
	// right_motor_2.move(80);
	// right_motor_3.move(80);
	// pros::delay(500);
}

// void autonomous()
// {
// 	// Reset encoder at start of autonomous
// 	arm_encoder.reset();

// 	// Lower arm at the beginning
// 	arm.move(60);	   // Positive value moves arm down
// 	pros::delay(1000); // Run for 1 second
// 	arm.move(0);	   // Stop the arm
// 	pros::delay(200);  // Small delay to ensure arm is stable

// 	// Drive forward for 1.5 seconds
// 	left_motor_1.move(80);
// 	left_motor_2.move(80);
// 	left_motor_3.move(80);
// 	right_motor_1.move(80);
// 	right_motor_2.move(80);
// 	right_motor_3.move(80);
// 	pros::delay(3000);

// 	// Stop driving
// 	left_motor_1.move(0);
// 	left_motor_2.move(0);
// 	left_motor_3.move(0);
// 	right_motor_1.move(0);
// 	right_motor_2.move(0);
// 	right_motor_3.move(0);

// 	// Activate intake
// 	intake.move(127);
// 	pros::delay(1000);
// 	intake.move(0);

// 	// Raise arm to scoring position
// 	while (arm_encoder.get_value() < 1000)
// 	{
// 		arm.move(60);
// 		pros::delay(20);
// 	}
// 	arm.move(0);

// 	// Deploy scoring mechanism
// 	clamp.set_value(true);
// 	pros::delay(500);
// 	clamp.set_value(false);
// }

// void autonomous()
// {
// 	pros::Motor left_motor_1(-18);
// 	pros::Motor left_motor_2(-19);
// 	pros::Motor left_motor_3(-20);
// 	// ^^ negative ports are reversed

// 	pros::Motor right_motor_1(1);
// 	pros::Motor right_motor_2(2);
// 	pros::Motor right_motor_3(3);

// 	left_motor_1.move(-95);
// 	left_motor_2.move(-95);
// 	left_motor_3.move(-95);
// 	right_motor_1.move(-95);
// 	right_motor_2.move(-95);
// 	right_motor_3.move(-95);

// 	pros::delay(1000); // wait 3 seconds

// 	left_motor_1.move(0);
// 	left_motor_2.move(0);
// 	left_motor_3.move(0);
// 	right_motor_1.move(0);
// 	right_motor_2.move(0);
// 	right_motor_3.move(0);
// }
/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */
void opcontrol()
{
	pros::Controller master(pros::E_CONTROLLER_MASTER);
	pros::Motor left_motor_1(-18);
	pros::Motor left_motor_2(-19);
	pros::Motor left_motor_3(-20);
	// ^^ negative ports are reversed

	pros::Motor right_motor_1(1);
	pros::Motor right_motor_2(2);
	pros::Motor right_motor_3(3);
	// pros::MotorGroup right_mg({1, 2, 3}); // Creates a motor group with forwards port 5 and reversed ports 4 & 6
	pros::Motor intake(6);
	pros::Motor hook(-11);
	pros::Motor arm(5);

	pros::ADIDigitalOut clamp('H');
	pros::ADIDigitalOut doinker('G');
	pros::ADIEncoder arm_encoder('A', 'B', false);

	// scoreing positin: 110
	//
	while (true)
	{
		pros::lcd::print(0, "%d %d %d", (pros::lcd::read_buttons() & LCD_BTN_LEFT) >> 2,
						 (pros::lcd::read_buttons() & LCD_BTN_CENTER) >> 1,
						 (pros::lcd::read_buttons() & LCD_BTN_RIGHT) >> 0);

		int current_position = arm_encoder.get_value();
		static int print_counter = 0;
		if (print_counter % 150 == 0)
		{ // 150 * 20ms = 3000ms = 3s
			pros::lcd::print(1, "Encoder: %d", current_position);
		}
		print_counter++;

		// Arcade control scheme
		int dir = master.get_analog(ANALOG_LEFT_Y);	  // Gets amount forward/backward from left joystick
		int turn = master.get_analog(ANALOG_RIGHT_X); // Gets the turn left/right from right joystick
		left_motor_1.move(dir + turn);
		left_motor_2.move(dir + turn);
		left_motor_3.move(dir + turn);
		right_motor_1.move(dir - turn);
		right_motor_2.move(dir - turn);
		right_motor_3.move(dir - turn);

		// Intake control with L1 (forward) and L2 (reverse)
		if (master.get_digital(DIGITAL_R1))
		{
			intake.move(127); // Full speed forward
			hook.move(-100);  // Full speed forward
		}
		else if (master.get_digital(DIGITAL_R2))
		{
			hook.move(100);	   // Full speed forward
			intake.move(-127); // Full speed reverse
		}
		else
		{
			hook.move(0);	// Full speed forward
			intake.move(0); // Stop if neither button is pressed
		}

		// // hook control with R1 (forward) and R2 (reverse)

		// Position control for arm using encoder when Y is pressed
		if (master.get_digital(DIGITAL_Y))
		{
			const int TARGET_POSITION = 1000; // Adjust this value as needed
			int current_position = arm_encoder.get_value();
			int error = TARGET_POSITION - current_position;
			int speed = std::min(std::max(error * 0.5, -60.0), 60.0); // P control with limits
			arm.move(speed);
		}
		else if (!master.get_digital(DIGITAL_L1) && !master.get_digital(DIGITAL_L2))
		{
			arm.move(0);
		}
		if (master.get_digital(DIGITAL_L1))
		{
			arm.move(-60); // Full speed forward
		}
		else if (master.get_digital(DIGITAL_L2))
		{
			arm.move(60); // Full speed reverse
		}
		else
		{
			arm.move(0); // Stop if neither button is pressed
		}

		// Single-action solenoid control for clamp
		static bool clamp_state = false;
		static bool clamp_last_a_state = false;
		bool clamp_current_a_state = master.get_digital(DIGITAL_A);

		// Toggle state on button press (not hold)
		if (clamp_current_a_state && !clamp_last_a_state)
		{
			clamp_state = !clamp_state;
		}
		clamp_last_a_state = clamp_current_a_state;

		// Set solenoid based on toggled state
		clamp.set_value(clamp_state);

		// Single-action solenoid control for doinker
		static bool doinker_state = false;
		static bool doinker_last_x_state = false;
		bool doinker_current_x_state = master.get_digital(DIGITAL_X);

		// Toggle state on button press (not hold)
		if (doinker_current_x_state && !doinker_last_x_state)
		{
			doinker_state = !doinker_state;
		}
		doinker_last_x_state = doinker_current_x_state;

		// Set solenoid based on toggled state
		doinker.set_value(doinker_state);

		pros::delay(20);
	}
}

// DELETE LATER
// int main()
//{
// Call the autonomous function for testing
//	autonomous();

// Start operator control (if needed)
//	opcontrol();
//}