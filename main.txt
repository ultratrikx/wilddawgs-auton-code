#include "main.h"

/**
 * A callback function for LLEMU's center button.
 *
 * When this callback is fired, it will toggle line 2 of the LCD text between
 * "I was pressed!" and nothing.
 */
void on_center_button()
{
	static bool pressed = false;
	pressed = !pressed;
	if (pressed)
	{
		pros::lcd::set_text(2, "working");
	}
	else
	{
		pros::lcd::clear_line(2);
	}
}

/**
 * Runs initialization code. This occurs as soon as the program is started.
 *
 * All other competition modes are blocked by initialize; it is recommended
 * to keep execution time for this mode under a few seconds.
 */
void initialize()
{
	pros::lcd::initialize();
	pros::lcd::set_text(1, "Hello PROS User!");

	pros::lcd::register_btn1_cb(on_center_button);

	// Initialize double action solenoid to retracted position
	pros::ADIDigitalOut double_action_solenoid_extend('H');
	pros::ADIDigitalOut double_action_solenoid_retract('H');
	double_action_solenoid_extend.set_value(false);
	double_action_solenoid_retract.set_value(true);
}

/**
 * Runs while the robot is in the disabled state of Field Management System or
 * the VEX Competition Switch, following either autonomous or opcontrol. When
 * the robot is enabled, this task will exit.
 */
void disabled() {}

/**
 * Runs after initialize(), and before autonomous when connected to the Field
 * Management System or the VEX Competition Switch. This is intended for
 * competition-specific initialization routines, such as an autonomous selector
 * on the LCD.
 *
 * This task will exit when the robot is enabled and autonomous or opcontrol
 * starts.
 */
void competition_initialize() {}

/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */

void autonomous()
/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */
{
	pros::MotorGroup left_mg({-10, -9, -13});
	pros::MotorGroup right_mg({1, 20, 11});

	left_mg.move(-95);	// 75% of 127
	right_mg.move(-95); // 75% of 127

	pros::delay(1000); // wait 3 seconds

	left_mg.move(0); // stop motors
	right_mg.move(0);
}
void opcontrol()
{
	pros::Controller master(pros::E_CONTROLLER_MASTER);
	pros::MotorGroup left_mg({-10, -9, -13}); // Creates a motor group with forwards ports 1 & 3 and reversed port 2
	pros::MotorGroup right_mg({1, 20, 11});	  // Creates a motor group with forwards port 5 and reversed ports 4 & 6
	pros::Motor intake(16);
	pros::Motor lbrown(7);

	pros::ADIDigitalOut single_action_solenoid('G');
	pros::ADIDigitalOut double_action_solenoid_extend('H');
	pros::ADIDigitalOut double_action_solenoid_retract('H');

	while (true)
	{
		pros::lcd::print(0, "%d %d %d", (pros::lcd::read_buttons() & LCD_BTN_LEFT) >> 2,
						 (pros::lcd::read_buttons() & LCD_BTN_CENTER) >> 1,
						 (pros::lcd::read_buttons() & LCD_BTN_RIGHT) >> 0);

		// Arcade control scheme
		int dir = master.get_analog(ANALOG_LEFT_Y);	  // Gets amount forward/backward from left joystick
		int turn = master.get_analog(ANALOG_RIGHT_X); // Gets the turn left/right from right joystick
		left_mg.move(dir + turn);					  // Sets left motor voltage
		right_mg.move(dir - turn);					  // Sets right motor voltage

		// Intake control with L1 (forward) and L2 (reverse)
		if (master.get_digital(DIGITAL_R1))
		{
			intake.move(127); // Full speed forward
		}
		else if (master.get_digital(DIGITAL_R2))
		{
			intake.move(-127); // Full speed reverse
		}
		else
		{
			intake.move(0); // Stop if neither button is pressed
		}

		// Lbrown control with R1 (forward) and R2 (reverse)
		if (master.get_digital(DIGITAL_L1))
		{
			lbrown.move(-100); // Full speed forward
		}
		else if (master.get_digital(DIGITAL_L2))
		{
			lbrown.move(100); // Full speed reverse
		}
		else
		{
			lbrown.move(0); // Stop if neither button is pressed
		}
		// Single-action solenoid control
		static bool single_solenoid_state = false;
		static bool last_a_state = false;
		bool current_a_state = master.get_digital(DIGITAL_A);

		// Toggle state on button press (not hold)
		if (current_a_state && !last_a_state)
		{
			single_solenoid_state = !single_solenoid_state;
		}
		last_a_state = current_a_state;

		// Set solenoid based on toggled state
		single_action_solenoid.set_value(single_solenoid_state);

		// Double-action solenoid control
		static bool solenoid_state = false; // Initialize to false
		static bool last_b_state = false;
		bool current_b_state = master.get_digital(DIGITAL_B);

		// Toggle state on button press (not hold)
		if (current_b_state && !last_b_state)
		{
			solenoid_state = !solenoid_state;
		}
		last_b_state = current_b_state;

		// Set solenoid based on toggled state
		if (solenoid_state)
		{
			double_action_solenoid_extend.set_value(true);
			double_action_solenoid_retract.set_value(false);
		}
		else
		{
			double_action_solenoid_extend.set_value(false);
			double_action_solenoid_retract.set_value(true);
		}

		pros::delay(20);
	}
}
